#include <stdio.h>
#include <stdlib.h>
#include <string.h> 
#include <arpa/inet.h>
#include <unistd.h>
#include <time.h>

int generate_random_number() {
    return rand() % 900 + 100; // Generates a random number between 100 and 999
}

int main() {
    int server_fd, client_fd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    char buffer[1024];

    // Create a socket
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == -1) {
        perror("Error creating socket");
        return 1;
    }

    // Set up the server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8443);

    // Bind the socket to the server address
    if (bind(server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Error binding");
        close(server_fd);
        return 1;
    }

    // Listen for incoming connections
    if (listen(server_fd, 1) == -1) {
        perror("Error listening");
        close(server_fd);
        return 1;
    }

    printf("Server listening on port 8443...\n");

    // Accept a connection from a client
    client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_addr_len);
    if (client_fd == -1) {
        perror("Error accepting connection");
        close(server_fd);
        return 1;
    }

    printf("Client connected!\n");

    // Generate a random number
    srand(time(NULL));
    int random_number = generate_random_number();

    // Send the random number to the client
    if (send(client_fd, &random_number, sizeof(random_number), 0) == -1) {
        perror("Error sending data");
        close(client_fd);
        close(server_fd);
        return 1;
    }

    printf("Sent random number: %d\n", random_number);

    // Close the client and server sockets
    close(client_fd);
    close(server_fd);

    return 0;
}
